# -*- coding: utf-8 -*-
"""housepriceprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19WDOOCEvcVIkoK7Drc9xP_kdDwsWiPaM
"""

#import dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.datasets import fetch_california_housing

#importing the boston house price dataset
housing = fetch_california_housing()
print(housing)

#loading the data to pandas dataframe
data = pd.DataFrame(housing.data, columns = housing.feature_names)

#print the first 5 rows
data.head()

#add the target column to the dataframe
data['price']= housing.target

data.head()

#check the number of rows and columns
data.shape

#missing values?
data.isnull().sum()

#stats of the data
data.describe()

#understand the correlatin between the various value in the data
correlation = data.corr()

#constructing an heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8}, cmap='Blues')

#splitting the data and the target
x = data .drop(['price'], axis =1)
y= data['price']

#splitting the data into training and testing data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

#model training
model = XGBRegressor()

model.fit(x_train, y_train)

#accuracy
training_data_prediction = model.predict(x_train)

#r squared error
score_1 =metrics.r2_score(y_train, training_data_prediction)

#mean absolute error
score_2 = metrics.mean_absolute_error(y_train, training_data_prediction)

print("R squared error: ", score_1)
print("mean absolute error: ", score_2)

#prediction
test_data_prediction = model.predict(x_test)

#r squared error
score_3 =metrics.r2_score(y_test, test_data_prediction)

#mean absolute error
score_4 = metrics.mean_absolute_error(y_test, test_data_prediction)

print("R squared error: ", score_3)
print("mean absolute error: ", score_4)

#visualization
plt.scatter(y_train, training_data_prediction)
plt.xlabel("actual price")
plt.ylabel("predicted price")
plt.title("actual price vs predicted price")
plt.show()

